!function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)n.d(t,o,function(r){return e[r]}.bind(null,o));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=393)}({105:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.LOGGING_WORKER="loggingWorker",r.NET_WORKER="netWorker",r.SQS_WORKER="sqsWorker"},106:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(105),o=n(82),a=n(44),i=n(43);r.logger={log:function(e,n,t){r.logger.doLog("INFO",e,n,t)},info:function(e,n,t){r.logger.doLog("INFO",e,n,t)},fatal:function(e,n,t){r.logger.doLog("FATAL",e,n,t)},error:function(e,n,t){r.logger.doLog("ERROR",e,n,t)},debug:function(e,n,t){r.logger.doLog("DEBUG",e,n,t)},warn:function(e,n,t){r.logger.doLog("WARN",e,n,t)},trace:function(e,n,t){r.logger.doLog("TRACE",e,n,t)},doLog:function(e,r,n,s){n&&(r=r+""+n),function(e,r,n,s){var u=a.workerCtx.principal,c=a.workerCtx.offline;s||(s={});new Promise(function(l,f){(s=u?i._.extend(s,{userUuid:u.userUuid,userName:u.userName,userEmail:u.userEmail,adUserId:u.adUserId,adClientId:u.adClientId}):i._.extend(s,{userUuid:"unknown",userName:"unknown",userEmail:"unknown",adUserId:"unknown",adClientId:"unknown"})).offline=c;new MessageChannel;var d={workerId:a.workerCtx.workerId,workerName:a.workerCtx.workerName,dstWorkerName:t.LOGGING_WORKER,messageName:"log",messageData:{level:e,time:r,message:n,attrs:s}};o.sendMessage(d).catch(function(e){console.error("workers/logger.sendOfflineLogMessage(): "+e)})})}(e,new Date,r,s)}}},109:function(e,r){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},111:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(82),o=n(44),a=n(106),i=!1,s=0,u={};function c(e,r,n,o){return function(i,s,u,c){return function(e,r,n,o,i,s,u,c){o.sqlIdCounter+=1;var l={};if(l.sqlId=o.sqlIdCounter,l.sql=i,l.bindings=s,l.resultFn=u,l.errFn=c,"opened"!==o.state)throw console.error("websqlw: executeSql(): transaction in illegall state (this might be caused by calling executeSql() recursively again inside executeSql() success or error callbacks"),console.error("websqlw: executeSql(): transaction in illegall state (this might be caused by calling executeSql() recursively again inside executeSql() success or error callbacks"),new Error("websqlw: executeSql(): transaction in illegall state (this might be caused by calling executeSql() recursively again inside executeSql() success or error callbacks");o.sqls[l.sqlId]=l;var f={workerId:e,workerName:r,messageName:"websqlTransactionExecuteSql",messageData:{dbId:n.dbId,trxId:o.trxId,sqlId:l.sqlId,sql:i,bindings:s}};return t.sendMessage(f).catch(function(e){console.error("websqlw: websqlTransactionExecuteSql reply: error: "+e),a.logger.error("websqlw: websqlTransactionExecuteSql reply: error: "+e)})}(e,r,n,o,i,s,u,c)}}function l(e,r,n){return function(o,i,s,l){return function(e,r,n,o,i,s,l){try{n.trxIdCounter+=1;var f={};f.trxId=n.trxIdCounter,f.errFn=i,f.successFn=s,f.continueOnError=l,f.sqlIdCounter=0,f.sqls={},f.executeSql=c(e,r,n,f),u[n.dbId].trxs[f.trxId]=f;var d={workerId:e,workerName:r,messageName:"websqlTransaction",messageData:{dbId:n.dbId,trxId:f.trxId,continueOnError:f.continueOnError}};t.sendMessage(d).then(function(){try{f.state="opened",o(f)}catch(o){f.state="error",console.error("websqlw: error while calling transaction callback"),console.dir(o),a.logger.error("websqlw: error while calling transaction callback",o),d={workerId:e,workerName:r,messageName:"websqlTransactionRemove",messageData:{dbId:n.dbId,trxId:f.trxId}},t.sendMessage(d).then(function(){try{i(f,o)}catch(e){throw console.error("websqlw: transaction: errFn: error while calling transaction error callback"),console.dir(e),a.logger.error("websqlw: transaction: errFn: error while calling transaction error callback",e),delete u[n.dbId].trxs[f.trxId],e}delete u[n.dbId].trxs[f.trxId]},function(e){console.error("websqlw: websqlTransactionRemove reply: error: "+e),a.logger.error("websqlw: websqlTransactionRemove reply: error: "+e)})}d={workerId:e,workerName:r,messageName:"websqlTransactionExecute",messageData:{dbId:n.dbId,trxId:f.trxId}},t.sendMessage(d).then(function(){f.state="executing"},function(e){f.state="error";try{console.error("websqlw: websqlTransactionExecute reply: error: "+e),a.logger.error("websqlw: websqlTransactionExecute reply: error: "+e),i(e)}catch(e){throw console.error("websqlw: transaction: errFn: error while calling transaction error callback"),console.dir(e),a.logger.error("websqlw: transaction: errFn: error while calling transaction error callback",e),delete u[n.dbId].trxs[f.trxId],e}delete u[n.dbId].trxs[f.trxId]})},function(e){f.state="error",console.error("websqlw: websqlTransaction reply: error: "+e),a.logger.error("websqlw: websqlTransaction reply: error: "+e);try{i(e)}catch(e){throw console.error("websqlw: transaction: errFn: error while calling transaction error callback"),console.dir(e),a.logger.error("websqlw: transaction: errFn: error while calling transaction error callback",e),delete u[n.dbId].trxs[f.trxId],e}throw delete u[n.dbId].trxs[f.trxId],e})}catch(e){throw console.error("websqlw: transaction: error: "),console.dir(e),a.logger.error("websqlw: transaction: error: ",e),e}}(e,r,n,o,i,s,l)}}function f(e){s+=1;var r={};r.dbId=s,r.trxIdCounter=0,r.trxs={},r.transaction=l(o.workerCtx.workerId,o.workerCtx.workerName,r),r.close=function(){delete u[r.dbId]},r.execute=function(e,n){return function(e,r,n){var t=o.workerCtx.workerName+"("+o.workerCtx.workerId+")";o.settings.settings.isDebug&&o.settings.settings.isDebugDatabase&&console.debug(t+" :database.execute: "+r);var i,s=!1;return new Promise(function(o,u){e.transaction(function(e){e.executeSql(r,n,function(e,r){s=!0,i=!0,o(r)},function(e,r){s=!0,i=!1,console.error(t+" :database.execute: tx.executeSql: "+r),console.dir(r),a.logger.error(t+" :database.execute: tx.executeSql: "+r,r,{event:"SQL"}),u(r)})},function(e){return s?i?(console.error(t+" :database.execute: internal error"),e=new Error(t+" :database.execute: internal error"),a.logger.error(t+" :database.execute: transaction: "+e,e,{event:"SQL"}),void u(e)):(console.error(t+" :database.execute: transaction: "+e),console.dir(e),void a.logger.error(t+" :database.execute: transaction: "+e,e,{event:"SQL"})):(console.error(t+" :database.execute: internal error: sql was not executed"),e=new Error(t+" :database.execute: internal error: sql was not executed"),a.logger.error(t+" :database.execute: transaction: "+e,e,{event:"SQL"}),void u(e))},function(){var e;return s?i?void 0:(console.error(t+" :database.execute: internal error"),e=new Error(t+" :database.execute: internal error"),a.logger.error(t+" :database.execute: transaction: "+e,e,{event:"SQL"}),void u(e)):(console.error(t+" :database.execute: internal error: sql was not executed"),e=new Error(t+" :database.execute: internal error: sql was not executed"),a.logger.error(t+" :database.execute: transaction: "+e,e,{event:"SQL"}),void u(e))})})}(r,e,n)};var n={workerId:o.workerCtx.workerId,workerName:o.workerCtx.workerName,messageName:"websqlDatabse",messageData:{dbId:r.dbId}};return t.sendMessage(n).then(function(){u[r.dbId]=r,e(void 0,r)},function(r){e(r)})}r.listenToEvenets=function(e){var r,n,t,o,s,c,l,f=e.data;i&&(console.log("websqlw: "+f.messageName),console.log("dbId: "+f.messageData.dbId),console.log("trxId: "+f.messageData.trxId),console.log("sqlId: "+f.messageData.sqlId));try{if("websqlTransactionExecuteSqlResultSuccess"===f.messageName){n=f.messageData.dbId,t=u[n],o=f.messageData.trxId,s=t.trxs[o],c=f.messageData.sqlId,(l=s.sqls[c]).result=f.messageData.result,l.result.rows.item=function(e){if(e<l.result.rows.length)return l.result.rows[e]};try{l.resultFn(s,l.result),e.ports[0].postMessage({}),s.sqls[c]=null}catch(r){try{console.error("websqlw: error while calling executeSql success callback"),console.dir(r),a.logger.error("websqlw: error while calling executeSql success callback",r),l.err=r,!1===l.errFn(s,l.err)&&(console.error('websqlw: error: executeSql() error callback "false" return value not supported, use instead "continueOnError" optional parameter for transaction() call'),a.logger.error('websqlw: error: executeSql() error callback "false" return value not supported, use instead "continueOnError" optional parameter for transaction() call')),e.ports[0].postMessage({err:""+r}),s.sqls[c]=null}catch(r){try{console.error("websqlw: error while calling executeSql error callback"),console.dir(r),a.logger.error("websqlw: error while calling executeSql error callback",r),e.ports[0].postMessage({err:""+r}),s.sqls[c]=null}catch(r){e.ports[0].postMessage({err:""+r}),s.sqls[c]=null}}}return!0}if("websqlTransactionExecuteSqlResultError"===f.messageName){n=f.messageData.dbId,t=u[n],o=f.messageData.trxId,s=t.trxs[o],c=f.messageData.sqlId,(l=s.sqls[c]).err=f.messageData.err;try{!1===l.errFn(s,l.err)&&(console.error('websqlw: error: executeSql() error callback "false" return value not supported, use instead "continueOnError" optional parameter for transaction() call'),a.logger.error('websqlw: error: executeSql() error callback "false" return value not supported, use instead "continueOnError" optional parameter for transaction() call')),e.ports[0].postMessage({}),s.sqls[c]=null}catch(r){throw console.error("websqlw: error while calling executeSql error callback"),console.dir(r),a.logger.error("websqlw: error while calling executeSql error callback",r),e.ports[0].postMessage({}),s.sqls[c]=null,r}return!0}if("websqlTransactionResultError"===f.messageName){n=f.messageData.dbId,t=u[n],o=f.messageData.trxId,s=t.trxs[o];try{s.errFn(f.messageData.err),e.ports[0].postMessage({}),delete t.trxs[o]}catch(r){throw e.ports[0].postMessage({}),delete t.trxs[o],console.error("websqlw: error while calling transaction callback"),console.dir(r),a.logger.error("websqlw: error while calling transaction callback",r),r}return!0}if("websqlTransactionResultSuccess"===f.messageName){n=f.messageData.dbId,t=u[n],o=f.messageData.trxId,s=t.trxs[o];try{s.successFn(),e.ports[0].postMessage({}),delete t.trxs[o]}catch(r){throw e.ports[0].postMessage({}),delete t.trxs[o],console.error("websqlw: error while calling transaction callback"),console.dir(r),a.logger.error("websqlw: error while calling transaction callback",r),r}return!0}}catch(r){return console.error("websqlw: error: "),console.dir(r),e.ports[0].postMessage({err:""+r}),!0}},r.openDatabase=function(){return new Promise(function(e,r){f(function(n,t){n?r(n):e(t)})})}},116:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(44),o=n(111),a=!1;self;r.bootWorker=function(e,r){self.addEventListener("message",function(n){var i,s=n.data,u=!1;a&&console.log("worker: "+s.workerName+": "+s.messageName);try{if("workerId"===s.messageName)return t.workerCtx.workerId=s.messageData.workerId,t.workerCtx.workerName=s.workerName,console.log("worker: "+s.workerName+": "+t.workerCtx.workerId+" :started"),n.ports[0].postMessage({workerId:t.workerCtx.workerId}),void(r&&(u||(u=!0,r())));if(t.workerCtx.workerId!==s.workerId&&t.workerCtx.workerId!==s.dstWorkerId)return console.error("workers/worker: workerId differs"),i=new Error("workers/worker: workerId differs"),void n.ports[0].postMessage({err:""+i});if("settings"===s.messageName)return t.setSettings(s.messageData.settings),void n.ports[0].postMessage({});if("offline"===s.messageName)return n.ports[0].postMessage({}),void(t.workerCtx.offline=s.messageData.offline);if("device"===s.messageName)return n.ports[0].postMessage({}),void(t.workerCtx.device=s.messageData.device);if("appVersion"===s.messageName)return n.ports[0].postMessage({}),void(t.workerCtx.appVersion=s.messageData.appVersion);if("environment"===s.messageName)return n.ports[0].postMessage({}),void(t.workerCtx.environment=s.messageData.environment);if("principal"===s.messageName)return n.ports[0].postMessage({}),void(t.workerCtx.principal=s.messageData.principal);if(o.listenToEvenets(n))return;if(e(n))return}catch(i){console.error("workerCommon: listenToEvenets(): error: "),console.dir(i),n.ports[0].postMessage({err:""+i})}})}},393:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(82),o=n(44),a=n(44),i=n(116),s=n(83),u=!1;function c(e){var r={workerId:a.workerCtx.workerId,workerName:a.workerCtx.workerName,messageName:"offline",messageData:{offline:e}};t.sendMessage(r),o.settings.settings.isDebug&&o.settings.settings.isDebugNet&&console.debug("netWorker: sent message: offline "+e)}i.bootWorker(function(e){var r=e.data;try{if(o.settings.settings.isDebug&&o.settings.settings.isDebugNet&&console.debug("netWorker: received message: "+r.messageName),"setOfflineState"===r.messageName){var n=r.messageData.offlile;return e.ports[0].postMessage({}),u!==n&&c(u=n),!0}}catch(r){console.error("netWorker: error: "),console.dir(r),e.ports[0].postMessage({err:""+r})}},function(){c(u),function e(){var r=o.settings.settings.httpPingInterval||0;r<15e3&&(r=15e3),self.setTimeout(function(){s.pingHttp(5e3).then(function(){var e=!1;o.settings.settings.isOffline&&(e=!0),u!==e&&c(u=e)},function(){!0!==u&&c(u=!0)}),e()},r)}()})},43:function(e,r,n){(function(e,n){var t;!function(){var o="object"==typeof self&&self.self===self&&self||"object"==typeof e&&e.global===e&&e||this||{},a=o._,i=Array.prototype,s=Object.prototype,u="undefined"!=typeof Symbol?Symbol.prototype:null,c=i.push,l=i.slice,f=s.toString,d=s.hasOwnProperty,p=Array.isArray,g=Object.keys,w=Object.create,v=function(){},m=function(e){return e instanceof m?e:this instanceof m?void(this._wrapped=e):new m(e)};void 0===r||r.nodeType?o._=m:(void 0!==n&&!n.nodeType&&n.exports&&(r=n.exports=m),r._=m),m.VERSION="1.9.1";var h,b=function(e,r,n){if(void 0===r)return e;switch(null==n?3:n){case 1:return function(n){return e.call(r,n)};case 3:return function(n,t,o){return e.call(r,n,t,o)};case 4:return function(n,t,o,a){return e.call(r,n,t,o,a)}}return function(){return e.apply(r,arguments)}},y=function(e,r,n){return m.iteratee!==h?m.iteratee(e,r):null==e?m.identity:m.isFunction(e)?b(e,r,n):m.isObject(e)&&!m.isArray(e)?m.matcher(e):m.property(e)};m.iteratee=h=function(e,r){return y(e,r,1/0)};var x=function(e,r){return r=null==r?e.length-1:+r,function(){for(var n=Math.max(arguments.length-r,0),t=Array(n),o=0;o<n;o++)t[o]=arguments[o+r];switch(r){case 0:return e.call(this,t);case 1:return e.call(this,arguments[0],t);case 2:return e.call(this,arguments[0],arguments[1],t)}var a=Array(r+1);for(o=0;o<r;o++)a[o]=arguments[o];return a[r]=t,e.apply(this,a)}},k=function(e){if(!m.isObject(e))return{};if(w)return w(e);v.prototype=e;var r=new v;return v.prototype=null,r},q=function(e){return function(r){return null==r?void 0:r[e]}},I=function(e,r){return null!=e&&d.call(e,r)},_=function(e,r){for(var n=r.length,t=0;t<n;t++){if(null==e)return;e=e[r[t]]}return n?e:void 0},N=Math.pow(2,53)-1,O=q("length"),S=function(e){var r=O(e);return"number"==typeof r&&r>=0&&r<=N};m.each=m.forEach=function(e,r,n){var t,o;if(r=b(r,n),S(e))for(t=0,o=e.length;t<o;t++)r(e[t],t,e);else{var a=m.keys(e);for(t=0,o=a.length;t<o;t++)r(e[a[t]],a[t],e)}return e},m.map=m.collect=function(e,r,n){r=y(r,n);for(var t=!S(e)&&m.keys(e),o=(t||e).length,a=Array(o),i=0;i<o;i++){var s=t?t[i]:i;a[i]=r(e[s],s,e)}return a};var j=function(e){return function(r,n,t,o){var a=arguments.length>=3;return function(r,n,t,o){var a=!S(r)&&m.keys(r),i=(a||r).length,s=e>0?0:i-1;for(o||(t=r[a?a[s]:s],s+=e);s>=0&&s<i;s+=e){var u=a?a[s]:s;t=n(t,r[u],u,r)}return t}(r,b(n,o,4),t,a)}};m.reduce=m.foldl=m.inject=j(1),m.reduceRight=m.foldr=j(-1),m.find=m.detect=function(e,r,n){var t=(S(e)?m.findIndex:m.findKey)(e,r,n);if(void 0!==t&&-1!==t)return e[t]},m.filter=m.select=function(e,r,n){var t=[];return r=y(r,n),m.each(e,function(e,n,o){r(e,n,o)&&t.push(e)}),t},m.reject=function(e,r,n){return m.filter(e,m.negate(y(r)),n)},m.every=m.all=function(e,r,n){r=y(r,n);for(var t=!S(e)&&m.keys(e),o=(t||e).length,a=0;a<o;a++){var i=t?t[a]:a;if(!r(e[i],i,e))return!1}return!0},m.some=m.any=function(e,r,n){r=y(r,n);for(var t=!S(e)&&m.keys(e),o=(t||e).length,a=0;a<o;a++){var i=t?t[a]:a;if(r(e[i],i,e))return!0}return!1},m.contains=m.includes=m.include=function(e,r,n,t){return S(e)||(e=m.values(e)),("number"!=typeof n||t)&&(n=0),m.indexOf(e,r,n)>=0},m.invoke=x(function(e,r,n){var t,o;return m.isFunction(r)?o=r:m.isArray(r)&&(t=r.slice(0,-1),r=r[r.length-1]),m.map(e,function(e){var a=o;if(!a){if(t&&t.length&&(e=_(e,t)),null==e)return;a=e[r]}return null==a?a:a.apply(e,n)})}),m.pluck=function(e,r){return m.map(e,m.property(r))},m.where=function(e,r){return m.filter(e,m.matcher(r))},m.findWhere=function(e,r){return m.find(e,m.matcher(r))},m.max=function(e,r,n){var t,o,a=-1/0,i=-1/0;if(null==r||"number"==typeof r&&"object"!=typeof e[0]&&null!=e)for(var s=0,u=(e=S(e)?e:m.values(e)).length;s<u;s++)null!=(t=e[s])&&t>a&&(a=t);else r=y(r,n),m.each(e,function(e,n,t){((o=r(e,n,t))>i||o===-1/0&&a===-1/0)&&(a=e,i=o)});return a},m.min=function(e,r,n){var t,o,a=1/0,i=1/0;if(null==r||"number"==typeof r&&"object"!=typeof e[0]&&null!=e)for(var s=0,u=(e=S(e)?e:m.values(e)).length;s<u;s++)null!=(t=e[s])&&t<a&&(a=t);else r=y(r,n),m.each(e,function(e,n,t){((o=r(e,n,t))<i||o===1/0&&a===1/0)&&(a=e,i=o)});return a},m.shuffle=function(e){return m.sample(e,1/0)},m.sample=function(e,r,n){if(null==r||n)return S(e)||(e=m.values(e)),e[m.random(e.length-1)];var t=S(e)?m.clone(e):m.values(e),o=O(t);r=Math.max(Math.min(r,o),0);for(var a=o-1,i=0;i<r;i++){var s=m.random(i,a),u=t[i];t[i]=t[s],t[s]=u}return t.slice(0,r)},m.sortBy=function(e,r,n){var t=0;return r=y(r,n),m.pluck(m.map(e,function(e,n,o){return{value:e,index:t++,criteria:r(e,n,o)}}).sort(function(e,r){var n=e.criteria,t=r.criteria;if(n!==t){if(n>t||void 0===n)return 1;if(n<t||void 0===t)return-1}return e.index-r.index}),"value")};var M=function(e,r){return function(n,t,o){var a=r?[[],[]]:{};return t=y(t,o),m.each(n,function(r,o){var i=t(r,o,n);e(a,r,i)}),a}};m.groupBy=M(function(e,r,n){I(e,n)?e[n].push(r):e[n]=[r]}),m.indexBy=M(function(e,r,n){e[n]=r}),m.countBy=M(function(e,r,n){I(e,n)?e[n]++:e[n]=1});var E=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;m.toArray=function(e){return e?m.isArray(e)?l.call(e):m.isString(e)?e.match(E):S(e)?m.map(e,m.identity):m.values(e):[]},m.size=function(e){return null==e?0:S(e)?e.length:m.keys(e).length},m.partition=M(function(e,r,n){e[n?0:1].push(r)},!0),m.first=m.head=m.take=function(e,r,n){return null==e||e.length<1?null==r?void 0:[]:null==r||n?e[0]:m.initial(e,e.length-r)},m.initial=function(e,r,n){return l.call(e,0,Math.max(0,e.length-(null==r||n?1:r)))},m.last=function(e,r,n){return null==e||e.length<1?null==r?void 0:[]:null==r||n?e[e.length-1]:m.rest(e,Math.max(0,e.length-r))},m.rest=m.tail=m.drop=function(e,r,n){return l.call(e,null==r||n?1:r)},m.compact=function(e){return m.filter(e,Boolean)};var D=function(e,r,n,t){for(var o=(t=t||[]).length,a=0,i=O(e);a<i;a++){var s=e[a];if(S(s)&&(m.isArray(s)||m.isArguments(s)))if(r)for(var u=0,c=s.length;u<c;)t[o++]=s[u++];else D(s,r,n,t),o=t.length;else n||(t[o++]=s)}return t};m.flatten=function(e,r){return D(e,r,!1)},m.without=x(function(e,r){return m.difference(e,r)}),m.uniq=m.unique=function(e,r,n,t){m.isBoolean(r)||(t=n,n=r,r=!1),null!=n&&(n=y(n,t));for(var o=[],a=[],i=0,s=O(e);i<s;i++){var u=e[i],c=n?n(u,i,e):u;r&&!n?(i&&a===c||o.push(u),a=c):n?m.contains(a,c)||(a.push(c),o.push(u)):m.contains(o,u)||o.push(u)}return o},m.union=x(function(e){return m.uniq(D(e,!0,!0))}),m.intersection=function(e){for(var r=[],n=arguments.length,t=0,o=O(e);t<o;t++){var a=e[t];if(!m.contains(r,a)){var i;for(i=1;i<n&&m.contains(arguments[i],a);i++);i===n&&r.push(a)}}return r},m.difference=x(function(e,r){return r=D(r,!0,!0),m.filter(e,function(e){return!m.contains(r,e)})}),m.unzip=function(e){for(var r=e&&m.max(e,O).length||0,n=Array(r),t=0;t<r;t++)n[t]=m.pluck(e,t);return n},m.zip=x(m.unzip),m.object=function(e,r){for(var n={},t=0,o=O(e);t<o;t++)r?n[e[t]]=r[t]:n[e[t][0]]=e[t][1];return n};var P=function(e){return function(r,n,t){n=y(n,t);for(var o=O(r),a=e>0?0:o-1;a>=0&&a<o;a+=e)if(n(r[a],a,r))return a;return-1}};m.findIndex=P(1),m.findLastIndex=P(-1),m.sortedIndex=function(e,r,n,t){for(var o=(n=y(n,t,1))(r),a=0,i=O(e);a<i;){var s=Math.floor((a+i)/2);n(e[s])<o?a=s+1:i=s}return a};var C=function(e,r,n){return function(t,o,a){var i=0,s=O(t);if("number"==typeof a)e>0?i=a>=0?a:Math.max(a+s,i):s=a>=0?Math.min(a+1,s):a+s+1;else if(n&&a&&s)return t[a=n(t,o)]===o?a:-1;if(o!=o)return(a=r(l.call(t,i,s),m.isNaN))>=0?a+i:-1;for(a=e>0?i:s-1;a>=0&&a<s;a+=e)if(t[a]===o)return a;return-1}};m.indexOf=C(1,m.findIndex,m.sortedIndex),m.lastIndexOf=C(-1,m.findLastIndex),m.range=function(e,r,n){null==r&&(r=e||0,e=0),n||(n=r<e?-1:1);for(var t=Math.max(Math.ceil((r-e)/n),0),o=Array(t),a=0;a<t;a++,e+=n)o[a]=e;return o},m.chunk=function(e,r){if(null==r||r<1)return[];for(var n=[],t=0,o=e.length;t<o;)n.push(l.call(e,t,t+=r));return n};var T=function(e,r,n,t,o){if(!(t instanceof r))return e.apply(n,o);var a=k(e.prototype),i=e.apply(a,o);return m.isObject(i)?i:a};m.bind=x(function(e,r,n){if(!m.isFunction(e))throw new TypeError("Bind must be called on a function");var t=x(function(o){return T(e,t,r,this,n.concat(o))});return t}),m.partial=x(function(e,r){var n=m.partial.placeholder,t=function(){for(var o=0,a=r.length,i=Array(a),s=0;s<a;s++)i[s]=r[s]===n?arguments[o++]:r[s];for(;o<arguments.length;)i.push(arguments[o++]);return T(e,t,this,this,i)};return t}),m.partial.placeholder=m,m.bindAll=x(function(e,r){var n=(r=D(r,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var t=r[n];e[t]=m.bind(e[t],e)}}),m.memoize=function(e,r){var n=function(t){var o=n.cache,a=""+(r?r.apply(this,arguments):t);return I(o,a)||(o[a]=e.apply(this,arguments)),o[a]};return n.cache={},n},m.delay=x(function(e,r,n){return setTimeout(function(){return e.apply(null,n)},r)}),m.defer=m.partial(m.delay,m,1),m.throttle=function(e,r,n){var t,o,a,i,s=0;n||(n={});var u=function(){s=!1===n.leading?0:m.now(),t=null,i=e.apply(o,a),t||(o=a=null)},c=function(){var c=m.now();s||!1!==n.leading||(s=c);var l=r-(c-s);return o=this,a=arguments,l<=0||l>r?(t&&(clearTimeout(t),t=null),s=c,i=e.apply(o,a),t||(o=a=null)):t||!1===n.trailing||(t=setTimeout(u,l)),i};return c.cancel=function(){clearTimeout(t),s=0,t=o=a=null},c},m.debounce=function(e,r,n){var t,o,a=function(r,n){t=null,n&&(o=e.apply(r,n))},i=x(function(i){if(t&&clearTimeout(t),n){var s=!t;t=setTimeout(a,r),s&&(o=e.apply(this,i))}else t=m.delay(a,r,this,i);return o});return i.cancel=function(){clearTimeout(t),t=null},i},m.wrap=function(e,r){return m.partial(r,e)},m.negate=function(e){return function(){return!e.apply(this,arguments)}},m.compose=function(){var e=arguments,r=e.length-1;return function(){for(var n=r,t=e[r].apply(this,arguments);n--;)t=e[n].call(this,t);return t}},m.after=function(e,r){return function(){if(--e<1)return r.apply(this,arguments)}},m.before=function(e,r){var n;return function(){return--e>0&&(n=r.apply(this,arguments)),e<=1&&(r=null),n}},m.once=m.partial(m.before,2),m.restArguments=x;var A=!{toString:null}.propertyIsEnumerable("toString"),F=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],R=function(e,r){var n=F.length,t=e.constructor,o=m.isFunction(t)&&t.prototype||s,a="constructor";for(I(e,a)&&!m.contains(r,a)&&r.push(a);n--;)(a=F[n])in e&&e[a]!==o[a]&&!m.contains(r,a)&&r.push(a)};m.keys=function(e){if(!m.isObject(e))return[];if(g)return g(e);var r=[];for(var n in e)I(e,n)&&r.push(n);return A&&R(e,r),r},m.allKeys=function(e){if(!m.isObject(e))return[];var r=[];for(var n in e)r.push(n);return A&&R(e,r),r},m.values=function(e){for(var r=m.keys(e),n=r.length,t=Array(n),o=0;o<n;o++)t[o]=e[r[o]];return t},m.mapObject=function(e,r,n){r=y(r,n);for(var t=m.keys(e),o=t.length,a={},i=0;i<o;i++){var s=t[i];a[s]=r(e[s],s,e)}return a},m.pairs=function(e){for(var r=m.keys(e),n=r.length,t=Array(n),o=0;o<n;o++)t[o]=[r[o],e[r[o]]];return t},m.invert=function(e){for(var r={},n=m.keys(e),t=0,o=n.length;t<o;t++)r[e[n[t]]]=n[t];return r},m.functions=m.methods=function(e){var r=[];for(var n in e)m.isFunction(e[n])&&r.push(n);return r.sort()};var L=function(e,r){return function(n){var t=arguments.length;if(r&&(n=Object(n)),t<2||null==n)return n;for(var o=1;o<t;o++)for(var a=arguments[o],i=e(a),s=i.length,u=0;u<s;u++){var c=i[u];r&&void 0!==n[c]||(n[c]=a[c])}return n}};m.extend=L(m.allKeys),m.extendOwn=m.assign=L(m.keys),m.findKey=function(e,r,n){r=y(r,n);for(var t,o=m.keys(e),a=0,i=o.length;a<i;a++)if(r(e[t=o[a]],t,e))return t};var W,K,B=function(e,r,n){return r in n};m.pick=x(function(e,r){var n={},t=r[0];if(null==e)return n;m.isFunction(t)?(r.length>1&&(t=b(t,r[1])),r=m.allKeys(e)):(t=B,r=D(r,!1,!1),e=Object(e));for(var o=0,a=r.length;o<a;o++){var i=r[o],s=e[i];t(s,i,e)&&(n[i]=s)}return n}),m.omit=x(function(e,r){var n,t=r[0];return m.isFunction(t)?(t=m.negate(t),r.length>1&&(n=r[1])):(r=m.map(D(r,!1,!1),String),t=function(e,n){return!m.contains(r,n)}),m.pick(e,t,n)}),m.defaults=L(m.allKeys,!0),m.create=function(e,r){var n=k(e);return r&&m.extendOwn(n,r),n},m.clone=function(e){return m.isObject(e)?m.isArray(e)?e.slice():m.extend({},e):e},m.tap=function(e,r){return r(e),e},m.isMatch=function(e,r){var n=m.keys(r),t=n.length;if(null==e)return!t;for(var o=Object(e),a=0;a<t;a++){var i=n[a];if(r[i]!==o[i]||!(i in o))return!1}return!0},W=function(e,r,n,t){if(e===r)return 0!==e||1/e==1/r;if(null==e||null==r)return!1;if(e!=e)return r!=r;var o=typeof e;return("function"===o||"object"===o||"object"==typeof r)&&K(e,r,n,t)},K=function(e,r,n,t){e instanceof m&&(e=e._wrapped),r instanceof m&&(r=r._wrapped);var o=f.call(e);if(o!==f.call(r))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+e==""+r;case"[object Number]":return+e!=+e?+r!=+r:0==+e?1/+e==1/r:+e==+r;case"[object Date]":case"[object Boolean]":return+e==+r;case"[object Symbol]":return u.valueOf.call(e)===u.valueOf.call(r)}var a="[object Array]"===o;if(!a){if("object"!=typeof e||"object"!=typeof r)return!1;var i=e.constructor,s=r.constructor;if(i!==s&&!(m.isFunction(i)&&i instanceof i&&m.isFunction(s)&&s instanceof s)&&"constructor"in e&&"constructor"in r)return!1}n=n||[],t=t||[];for(var c=n.length;c--;)if(n[c]===e)return t[c]===r;if(n.push(e),t.push(r),a){if((c=e.length)!==r.length)return!1;for(;c--;)if(!W(e[c],r[c],n,t))return!1}else{var l,d=m.keys(e);if(c=d.length,m.keys(r).length!==c)return!1;for(;c--;)if(l=d[c],!I(r,l)||!W(e[l],r[l],n,t))return!1}return n.pop(),t.pop(),!0},m.isEqual=function(e,r){return W(e,r)},m.isEmpty=function(e){return null==e||(S(e)&&(m.isArray(e)||m.isString(e)||m.isArguments(e))?0===e.length:0===m.keys(e).length)},m.isElement=function(e){return!(!e||1!==e.nodeType)},m.isArray=p||function(e){return"[object Array]"===f.call(e)},m.isObject=function(e){var r=typeof e;return"function"===r||"object"===r&&!!e},m.each(["Arguments","Function","String","Number","Date","RegExp","Error","Symbol","Map","WeakMap","Set","WeakSet"],function(e){m["is"+e]=function(r){return f.call(r)==="[object "+e+"]"}}),m.isArguments(arguments)||(m.isArguments=function(e){return I(e,"callee")});var U=o.document&&o.document.childNodes;"function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof U&&(m.isFunction=function(e){return"function"==typeof e||!1}),m.isFinite=function(e){return!m.isSymbol(e)&&isFinite(e)&&!isNaN(parseFloat(e))},m.isNaN=function(e){return m.isNumber(e)&&isNaN(e)},m.isBoolean=function(e){return!0===e||!1===e||"[object Boolean]"===f.call(e)},m.isNull=function(e){return null===e},m.isUndefined=function(e){return void 0===e},m.has=function(e,r){if(!m.isArray(r))return I(e,r);for(var n=r.length,t=0;t<n;t++){var o=r[t];if(null==e||!d.call(e,o))return!1;e=e[o]}return!!n},m.noConflict=function(){return o._=a,this},m.identity=function(e){return e},m.constant=function(e){return function(){return e}},m.noop=function(){},m.property=function(e){return m.isArray(e)?function(r){return _(r,e)}:q(e)},m.propertyOf=function(e){return null==e?function(){}:function(r){return m.isArray(r)?_(e,r):e[r]}},m.matcher=m.matches=function(e){return e=m.extendOwn({},e),function(r){return m.isMatch(r,e)}},m.times=function(e,r,n){var t=Array(Math.max(0,e));r=b(r,n,1);for(var o=0;o<e;o++)t[o]=r(o);return t},m.random=function(e,r){return null==r&&(r=e,e=0),e+Math.floor(Math.random()*(r-e+1))},m.now=Date.now||function(){return(new Date).getTime()};var G={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},Q=m.invert(G),V=function(e){var r=function(r){return e[r]},n="(?:"+m.keys(e).join("|")+")",t=RegExp(n),o=RegExp(n,"g");return function(e){return e=null==e?"":""+e,t.test(e)?e.replace(o,r):e}};m.escape=V(G),m.unescape=V(Q),m.result=function(e,r,n){m.isArray(r)||(r=[r]);var t=r.length;if(!t)return m.isFunction(n)?n.call(e):n;for(var o=0;o<t;o++){var a=null==e?void 0:e[r[o]];void 0===a&&(a=n,o=t),e=m.isFunction(a)?a.call(e):a}return e};var z=0;m.uniqueId=function(e){var r=++z+"";return e?e+r:r},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var H=/(.)^/,J={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},X=/\\|'|\r|\n|\u2028|\u2029/g,$=function(e){return"\\"+J[e]};m.template=function(e,r,n){!r&&n&&(r=n),r=m.defaults({},r,m.templateSettings);var t,o=RegExp([(r.escape||H).source,(r.interpolate||H).source,(r.evaluate||H).source].join("|")+"|$","g"),a=0,i="__p+='";e.replace(o,function(r,n,t,o,s){return i+=e.slice(a,s).replace(X,$),a=s+r.length,n?i+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":t?i+="'+\n((__t=("+t+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),r}),i+="';\n",r.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{t=new Function(r.variable||"obj","_",i)}catch(e){throw e.source=i,e}var s=function(e){return t.call(this,e,m)},u=r.variable||"obj";return s.source="function("+u+"){\n"+i+"}",s},m.chain=function(e){var r=m(e);return r._chain=!0,r};var Y=function(e,r){return e._chain?m(r).chain():r};m.mixin=function(e){return m.each(m.functions(e),function(r){var n=m[r]=e[r];m.prototype[r]=function(){var e=[this._wrapped];return c.apply(e,arguments),Y(this,n.apply(m,e))}}),m},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var r=i[e];m.prototype[e]=function(){var n=this._wrapped;return r.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0],Y(this,n)}}),m.each(["concat","join","slice"],function(e){var r=i[e];m.prototype[e]=function(){return Y(this,r.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return String(this._wrapped)},void 0===(t=function(){return m}.apply(r,[]))||(n.exports=t)}()}).call(this,n(54),n(109)(e))},44:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});self;r.workerCtx={workerId:null,workerName:"unknown",offline:!0,device:{},settings:{},appVersion:null,environment:null,principal:null},r.settings={settings:{}},r.setSettings=function(e){r.workerCtx.settings=e,r.settings.settings=e}},49:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(43);function o(e){return new Promise(function(r,n){return r(e)})}function a(e){return new Promise(function(r,n){return n(e)})}r.toPromise=function(e){return e&&"function"==typeof e.then?new Promise(function(r,n){e.then(function(e){r(e)},function(e){n(e)})}):o(e)},r.newPromise=function(e){return new Promise(function(r,n){try{e(r,n)}catch(e){console.error(e),n(e)}})},r.promiseResolve=o,r.promiseReject=a,r.promiseAll=function(e){var r=e.length;return new Promise(function(n,o){var a=[];0===r?n(a):t._.each(e,function(e,t){e.then(function(e){a[t]=e,0==--r&&n(a)},function(e){o(e)})})})},r.sequenceOfPromises=function(e,r){return function n(t,o){var a=e(o,r);return a?a.then(function(){return n(t,o+1)},function(e){return console.error("error in generatorFn:"),console.dir(e),n(e,o+1)}):new Promise(function(e,r){t?r(t):e()})}(null,0)},r.sequenceOfPromisesUntillValue=function(e,r,n){return function t(o,i){var s=e(i,n);return s?s.then(function(e){return r(e)?o?a(o):void 0:t(o,i+1)},function(e){return t(e,i+1)}):new Promise(function(e,r){o?r(o):e()})}(null,0)},r.waitFor=function(e,r,n){n||(n=1e3);var t=0;return new Promise(function(o,a){!function i(){e()?o():setTimeout(function(){(t+=n)>6e4&&console.error("waitFor(): waiting tool long for resource ...."),r&&t>r&&(console.error("waitFor(): timeout"),a(new Error("waitFor(): timeout"))),i()},1e3)}()})},r.deepOmit=function(e,r){return function e(n){var o=t._.omit(n,r);return t._.each(o,function(r,n){t._.isObject(o[n])&&(o[n]=e(r))}),o}(e)},r.rowsToJson=function(e){var r={};return t._.each(e,function(e){r[e.Key]=e.Value}),r},r.clone=function e(r){if(null===r||"object"!=typeof r)return r;var n=r.constructor();for(var t in r)n[t]=e(r[t]);return n},r.rxPromise=function(e){return new Promise(function(r,n){e.subscribe(function(e){r(e)},function(e){n(e)})})},r.sleep=function(e){return new Promise(function(r,n){setTimeout(function(){r()},e)})}},54:function(e,r){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},82:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(49),o=n(105),a=n(83),i=n(44),s=self;function u(e){return new Promise(function(r,n){var t=new MessageChannel;s.postMessage(e,[t.port2]),t.port1.onmessage=function(e){e.data.err?n(e.data.err):r(e.data)}})}r.sendMessage=u,r.pingHttp=function(){var e={workerId:i.workerCtx.workerId,workerName:i.workerCtx.workerName,dstWorkerName:o.NET_WORKER,messageName:"setOfflinneState",messageData:{}};return a.pingHttp().then(function(r){return e.messageData.offline=!1,u(e),r},function(r){return e.messageData.offline=!0,u(e),t.promiseReject(r)})},r.refreshPrincipal=function(){return u({workerId:i.workerCtx.workerId,workerName:i.workerCtx.workerName,messageName:"refreshPrincipal",messageData:{}})}},83:function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.pingHttp=function(e){return new Promise(function(r,n){return e||(e=5e3),new Promise(function(r,n){var t=new XMLHttpRequest;t.timeout=e,t.onreadystatechange=function(){4===t.readyState&&(200===t.status?r():n())},t.open("OPTIONS","https://apiv1.cloudempiere.com/alpha/status",!0),t.send(),t.ontimeout=function(){return n()},t.error=function(e){return n()}}).then(r,n)})}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,